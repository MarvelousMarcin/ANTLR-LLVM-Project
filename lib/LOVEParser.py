# Generated from LOVE.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,29,137,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,1,0,
        1,1,1,1,3,1,31,8,1,1,1,5,1,34,8,1,10,1,12,1,37,9,1,1,2,1,2,1,2,1,
        2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
        3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,71,8,3,1,4,
        1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,88,8,
        6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,99,8,7,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,3,8,109,8,8,1,9,1,9,1,10,1,10,1,10,1,10,5,10,117,
        8,10,10,10,12,10,120,9,10,3,10,122,8,10,1,10,1,10,1,11,3,11,127,
        8,11,1,11,5,11,130,8,11,10,11,12,11,133,9,11,1,12,1,12,1,12,0,0,
        13,0,2,4,6,8,10,12,14,16,18,20,22,24,0,0,145,0,26,1,0,0,0,2,35,1,
        0,0,0,4,38,1,0,0,0,6,70,1,0,0,0,8,72,1,0,0,0,10,74,1,0,0,0,12,87,
        1,0,0,0,14,98,1,0,0,0,16,108,1,0,0,0,18,110,1,0,0,0,20,112,1,0,0,
        0,22,131,1,0,0,0,24,134,1,0,0,0,26,27,3,2,1,0,27,1,1,0,0,0,28,31,
        3,6,3,0,29,31,3,4,2,0,30,28,1,0,0,0,30,29,1,0,0,0,30,31,1,0,0,0,
        31,32,1,0,0,0,32,34,5,28,0,0,33,30,1,0,0,0,34,37,1,0,0,0,35,33,1,
        0,0,0,35,36,1,0,0,0,36,3,1,0,0,0,37,35,1,0,0,0,38,39,5,10,0,0,39,
        40,3,24,12,0,40,41,3,22,11,0,41,42,5,11,0,0,42,5,1,0,0,0,43,44,5,
        18,0,0,44,71,5,20,0,0,45,46,5,17,0,0,46,71,5,20,0,0,47,48,5,19,0,
        0,48,71,5,20,0,0,49,50,5,20,0,0,50,51,5,1,0,0,51,71,3,12,6,0,52,
        53,5,20,0,0,53,54,5,1,0,0,54,71,3,20,10,0,55,56,5,20,0,0,56,57,5,
        2,0,0,57,58,5,22,0,0,58,71,5,3,0,0,59,60,5,12,0,0,60,61,3,18,9,0,
        61,62,3,2,1,0,62,63,5,16,0,0,63,71,1,0,0,0,64,65,5,13,0,0,65,66,
        3,10,5,0,66,67,5,14,0,0,67,68,3,8,4,0,68,69,5,15,0,0,69,71,1,0,0,
        0,70,43,1,0,0,0,70,45,1,0,0,0,70,47,1,0,0,0,70,49,1,0,0,0,70,52,
        1,0,0,0,70,55,1,0,0,0,70,59,1,0,0,0,70,64,1,0,0,0,71,7,1,0,0,0,72,
        73,3,2,1,0,73,9,1,0,0,0,74,75,5,20,0,0,75,76,5,4,0,0,76,77,5,22,
        0,0,77,11,1,0,0,0,78,88,3,14,7,0,79,80,3,14,7,0,80,81,5,23,0,0,81,
        82,3,12,6,0,82,88,1,0,0,0,83,84,3,14,7,0,84,85,5,25,0,0,85,86,3,
        12,6,0,86,88,1,0,0,0,87,78,1,0,0,0,87,79,1,0,0,0,87,83,1,0,0,0,88,
        13,1,0,0,0,89,99,3,16,8,0,90,91,3,16,8,0,91,92,5,26,0,0,92,93,3,
        16,8,0,93,99,1,0,0,0,94,95,3,16,8,0,95,96,5,24,0,0,96,97,3,16,8,
        0,97,99,1,0,0,0,98,89,1,0,0,0,98,90,1,0,0,0,98,94,1,0,0,0,99,15,
        1,0,0,0,100,109,5,22,0,0,101,109,5,21,0,0,102,109,5,20,0,0,103,109,
        5,27,0,0,104,105,5,5,0,0,105,106,3,12,6,0,106,107,5,6,0,0,107,109,
        1,0,0,0,108,100,1,0,0,0,108,101,1,0,0,0,108,102,1,0,0,0,108,103,
        1,0,0,0,108,104,1,0,0,0,109,17,1,0,0,0,110,111,3,16,8,0,111,19,1,
        0,0,0,112,121,5,7,0,0,113,118,5,22,0,0,114,115,5,8,0,0,115,117,5,
        22,0,0,116,114,1,0,0,0,117,120,1,0,0,0,118,116,1,0,0,0,118,119,1,
        0,0,0,119,122,1,0,0,0,120,118,1,0,0,0,121,113,1,0,0,0,121,122,1,
        0,0,0,122,123,1,0,0,0,123,124,5,9,0,0,124,21,1,0,0,0,125,127,3,6,
        3,0,126,125,1,0,0,0,126,127,1,0,0,0,127,128,1,0,0,0,128,130,5,28,
        0,0,129,126,1,0,0,0,130,133,1,0,0,0,131,129,1,0,0,0,131,132,1,0,
        0,0,132,23,1,0,0,0,133,131,1,0,0,0,134,135,5,20,0,0,135,25,1,0,0,
        0,10,30,35,70,87,98,108,118,121,126,131
    ]

class LOVEParser ( Parser ):

    grammarFileName = "LOVE.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'LOVE'", "'['", "']'", "'=='", "'('", 
                     "')'", "'{'", "','", "'}'", "'fLOVE'", "'endfLOVE'", 
                     "'loop'", "'if'", "'then'", "'endif'", "'endloop'", 
                     "'get'", "'show'", "'gets'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'+'", "'/'", "'-'", "'*'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "FUNCTION", "ENDFUNCTION", 
                      "REPEAT", "IF", "THEN", "ENDIF", "ENDREPEAT", "GET", 
                      "SHOW", "GETS", "ID", "REAL", "INT", "ADD", "DIV", 
                      "MINUS", "MULT", "STRING", "NEWLINE", "WS" ]

    RULE_prog = 0
    RULE_block = 1
    RULE_function = 2
    RULE_stat = 3
    RULE_blockif = 4
    RULE_equal = 5
    RULE_expr0 = 6
    RULE_expr1 = 7
    RULE_expr2 = 8
    RULE_repetitions = 9
    RULE_array = 10
    RULE_fblock = 11
    RULE_fparam = 12

    ruleNames =  [ "prog", "block", "function", "stat", "blockif", "equal", 
                   "expr0", "expr1", "expr2", "repetitions", "array", "fblock", 
                   "fparam" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    FUNCTION=10
    ENDFUNCTION=11
    REPEAT=12
    IF=13
    THEN=14
    ENDIF=15
    ENDREPEAT=16
    GET=17
    SHOW=18
    GETS=19
    ID=20
    REAL=21
    INT=22
    ADD=23
    DIV=24
    MINUS=25
    MULT=26
    STRING=27
    NEWLINE=28
    WS=29

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(LOVEParser.BlockContext,0)


        def getRuleIndex(self):
            return LOVEParser.RULE_prog

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProg" ):
                listener.enterProg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProg" ):
                listener.exitProg(self)




    def prog(self):

        localctx = LOVEParser.ProgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_prog)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 26
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(LOVEParser.NEWLINE)
            else:
                return self.getToken(LOVEParser.NEWLINE, i)

        def stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LOVEParser.StatContext)
            else:
                return self.getTypedRuleContext(LOVEParser.StatContext,i)


        def function(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LOVEParser.FunctionContext)
            else:
                return self.getTypedRuleContext(LOVEParser.FunctionContext,i)


        def getRuleIndex(self):
            return LOVEParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = LOVEParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 35
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 270414848) != 0:
                self.state = 30
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [12, 13, 17, 18, 19, 20]:
                    self.state = 28
                    self.stat()
                    pass
                elif token in [10]:
                    self.state = 29
                    self.function()
                    pass
                elif token in [28]:
                    pass
                else:
                    pass
                self.state = 32
                self.match(LOVEParser.NEWLINE)
                self.state = 37
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(LOVEParser.FUNCTION, 0)

        def fparam(self):
            return self.getTypedRuleContext(LOVEParser.FparamContext,0)


        def fblock(self):
            return self.getTypedRuleContext(LOVEParser.FblockContext,0)


        def ENDFUNCTION(self):
            return self.getToken(LOVEParser.ENDFUNCTION, 0)

        def getRuleIndex(self):
            return LOVEParser.RULE_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction" ):
                listener.enterFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction" ):
                listener.exitFunction(self)




    def function(self):

        localctx = LOVEParser.FunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_function)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 38
            self.match(LOVEParser.FUNCTION)
            self.state = 39
            self.fparam()
            self.state = 40
            self.fblock()
            self.state = 41
            self.match(LOVEParser.ENDFUNCTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LOVEParser.RULE_stat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AssignArrayContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LOVEParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ID(self):
            return self.getToken(LOVEParser.ID, 0)
        def array(self):
            return self.getTypedRuleContext(LOVEParser.ArrayContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignArray" ):
                listener.enterAssignArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignArray" ):
                listener.exitAssignArray(self)


    class GetContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LOVEParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GET(self):
            return self.getToken(LOVEParser.GET, 0)
        def ID(self):
            return self.getToken(LOVEParser.ID, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet" ):
                listener.enterGet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet" ):
                listener.exitGet(self)


    class RepeatContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LOVEParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPEAT(self):
            return self.getToken(LOVEParser.REPEAT, 0)
        def repetitions(self):
            return self.getTypedRuleContext(LOVEParser.RepetitionsContext,0)

        def block(self):
            return self.getTypedRuleContext(LOVEParser.BlockContext,0)

        def ENDREPEAT(self):
            return self.getToken(LOVEParser.ENDREPEAT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeat" ):
                listener.enterRepeat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeat" ):
                listener.exitRepeat(self)


    class ShowContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LOVEParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(LOVEParser.SHOW, 0)
        def ID(self):
            return self.getToken(LOVEParser.ID, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow" ):
                listener.enterShow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow" ):
                listener.exitShow(self)


    class ArrayAccessContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LOVEParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ID(self):
            return self.getToken(LOVEParser.ID, 0)
        def INT(self):
            return self.getToken(LOVEParser.INT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayAccess" ):
                listener.enterArrayAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayAccess" ):
                listener.exitArrayAccess(self)


    class GetsContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LOVEParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GETS(self):
            return self.getToken(LOVEParser.GETS, 0)
        def ID(self):
            return self.getToken(LOVEParser.ID, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGets" ):
                listener.enterGets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGets" ):
                listener.exitGets(self)


    class IfContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LOVEParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(LOVEParser.IF, 0)
        def equal(self):
            return self.getTypedRuleContext(LOVEParser.EqualContext,0)

        def THEN(self):
            return self.getToken(LOVEParser.THEN, 0)
        def blockif(self):
            return self.getTypedRuleContext(LOVEParser.BlockifContext,0)

        def ENDIF(self):
            return self.getToken(LOVEParser.ENDIF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf" ):
                listener.enterIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf" ):
                listener.exitIf(self)


    class AssignContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LOVEParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ID(self):
            return self.getToken(LOVEParser.ID, 0)
        def expr0(self):
            return self.getTypedRuleContext(LOVEParser.Expr0Context,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign" ):
                listener.enterAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign" ):
                listener.exitAssign(self)



    def stat(self):

        localctx = LOVEParser.StatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_stat)
        try:
            self.state = 70
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                localctx = LOVEParser.ShowContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 43
                self.match(LOVEParser.SHOW)
                self.state = 44
                self.match(LOVEParser.ID)
                pass

            elif la_ == 2:
                localctx = LOVEParser.GetContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 45
                self.match(LOVEParser.GET)
                self.state = 46
                self.match(LOVEParser.ID)
                pass

            elif la_ == 3:
                localctx = LOVEParser.GetsContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 47
                self.match(LOVEParser.GETS)
                self.state = 48
                self.match(LOVEParser.ID)
                pass

            elif la_ == 4:
                localctx = LOVEParser.AssignContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 49
                self.match(LOVEParser.ID)
                self.state = 50
                self.match(LOVEParser.T__0)
                self.state = 51
                self.expr0()
                pass

            elif la_ == 5:
                localctx = LOVEParser.AssignArrayContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 52
                self.match(LOVEParser.ID)
                self.state = 53
                self.match(LOVEParser.T__0)
                self.state = 54
                self.array()
                pass

            elif la_ == 6:
                localctx = LOVEParser.ArrayAccessContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 55
                self.match(LOVEParser.ID)
                self.state = 56
                self.match(LOVEParser.T__1)
                self.state = 57
                self.match(LOVEParser.INT)
                self.state = 58
                self.match(LOVEParser.T__2)
                pass

            elif la_ == 7:
                localctx = LOVEParser.RepeatContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 59
                self.match(LOVEParser.REPEAT)
                self.state = 60
                self.repetitions()
                self.state = 61
                self.block()
                self.state = 62
                self.match(LOVEParser.ENDREPEAT)
                pass

            elif la_ == 8:
                localctx = LOVEParser.IfContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 64
                self.match(LOVEParser.IF)
                self.state = 65
                self.equal()
                self.state = 66
                self.match(LOVEParser.THEN)
                self.state = 67
                self.blockif()
                self.state = 68
                self.match(LOVEParser.ENDIF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockifContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(LOVEParser.BlockContext,0)


        def getRuleIndex(self):
            return LOVEParser.RULE_blockif

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockif" ):
                listener.enterBlockif(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockif" ):
                listener.exitBlockif(self)




    def blockif(self):

        localctx = LOVEParser.BlockifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_blockif)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 72
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(LOVEParser.ID, 0)

        def INT(self):
            return self.getToken(LOVEParser.INT, 0)

        def getRuleIndex(self):
            return LOVEParser.RULE_equal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqual" ):
                listener.enterEqual(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqual" ):
                listener.exitEqual(self)




    def equal(self):

        localctx = LOVEParser.EqualContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_equal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 74
            self.match(LOVEParser.ID)
            self.state = 75
            self.match(LOVEParser.T__3)
            self.state = 76
            self.match(LOVEParser.INT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr0Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LOVEParser.RULE_expr0

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Single0Context(Expr0Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LOVEParser.Expr0Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr1(self):
            return self.getTypedRuleContext(LOVEParser.Expr1Context,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle0" ):
                listener.enterSingle0(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle0" ):
                listener.exitSingle0(self)


    class AddContext(Expr0Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LOVEParser.Expr0Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr1(self):
            return self.getTypedRuleContext(LOVEParser.Expr1Context,0)

        def ADD(self):
            return self.getToken(LOVEParser.ADD, 0)
        def expr0(self):
            return self.getTypedRuleContext(LOVEParser.Expr0Context,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd" ):
                listener.enterAdd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd" ):
                listener.exitAdd(self)


    class SubstrContext(Expr0Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LOVEParser.Expr0Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr1(self):
            return self.getTypedRuleContext(LOVEParser.Expr1Context,0)

        def MINUS(self):
            return self.getToken(LOVEParser.MINUS, 0)
        def expr0(self):
            return self.getTypedRuleContext(LOVEParser.Expr0Context,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstr" ):
                listener.enterSubstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstr" ):
                listener.exitSubstr(self)



    def expr0(self):

        localctx = LOVEParser.Expr0Context(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_expr0)
        try:
            self.state = 87
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                localctx = LOVEParser.Single0Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 78
                self.expr1()
                pass

            elif la_ == 2:
                localctx = LOVEParser.AddContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 79
                self.expr1()
                self.state = 80
                self.match(LOVEParser.ADD)
                self.state = 81
                self.expr0()
                pass

            elif la_ == 3:
                localctx = LOVEParser.SubstrContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 83
                self.expr1()
                self.state = 84
                self.match(LOVEParser.MINUS)
                self.state = 85
                self.expr0()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LOVEParser.RULE_expr1

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DivContext(Expr1Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LOVEParser.Expr1Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LOVEParser.Expr2Context)
            else:
                return self.getTypedRuleContext(LOVEParser.Expr2Context,i)

        def DIV(self):
            return self.getToken(LOVEParser.DIV, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiv" ):
                listener.enterDiv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiv" ):
                listener.exitDiv(self)


    class Single1Context(Expr1Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LOVEParser.Expr1Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr2(self):
            return self.getTypedRuleContext(LOVEParser.Expr2Context,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle1" ):
                listener.enterSingle1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle1" ):
                listener.exitSingle1(self)


    class MultContext(Expr1Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LOVEParser.Expr1Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LOVEParser.Expr2Context)
            else:
                return self.getTypedRuleContext(LOVEParser.Expr2Context,i)

        def MULT(self):
            return self.getToken(LOVEParser.MULT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMult" ):
                listener.enterMult(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMult" ):
                listener.exitMult(self)



    def expr1(self):

        localctx = LOVEParser.Expr1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_expr1)
        try:
            self.state = 98
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                localctx = LOVEParser.Single1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 89
                self.expr2()
                pass

            elif la_ == 2:
                localctx = LOVEParser.MultContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 90
                self.expr2()
                self.state = 91
                self.match(LOVEParser.MULT)
                self.state = 92
                self.expr2()
                pass

            elif la_ == 3:
                localctx = LOVEParser.DivContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 94
                self.expr2()
                self.state = 95
                self.match(LOVEParser.DIV)
                self.state = 96
                self.expr2()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LOVEParser.RULE_expr2

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ParContext(Expr2Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LOVEParser.Expr2Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr0(self):
            return self.getTypedRuleContext(LOVEParser.Expr0Context,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPar" ):
                listener.enterPar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPar" ):
                listener.exitPar(self)


    class StringContext(Expr2Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LOVEParser.Expr2Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRING(self):
            return self.getToken(LOVEParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString" ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString" ):
                listener.exitString(self)


    class RealContext(Expr2Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LOVEParser.Expr2Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def REAL(self):
            return self.getToken(LOVEParser.REAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReal" ):
                listener.enterReal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReal" ):
                listener.exitReal(self)


    class IdContext(Expr2Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LOVEParser.Expr2Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def ID(self):
            return self.getToken(LOVEParser.ID, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId" ):
                listener.enterId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId" ):
                listener.exitId(self)


    class IntContext(Expr2Context):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LOVEParser.Expr2Context
            super().__init__(parser)
            self.copyFrom(ctx)

        def INT(self):
            return self.getToken(LOVEParser.INT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInt" ):
                listener.enterInt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInt" ):
                listener.exitInt(self)



    def expr2(self):

        localctx = LOVEParser.Expr2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_expr2)
        try:
            self.state = 108
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22]:
                localctx = LOVEParser.IntContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 100
                self.match(LOVEParser.INT)
                pass
            elif token in [21]:
                localctx = LOVEParser.RealContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 101
                self.match(LOVEParser.REAL)
                pass
            elif token in [20]:
                localctx = LOVEParser.IdContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 102
                self.match(LOVEParser.ID)
                pass
            elif token in [27]:
                localctx = LOVEParser.StringContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 103
                self.match(LOVEParser.STRING)
                pass
            elif token in [5]:
                localctx = LOVEParser.ParContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 104
                self.match(LOVEParser.T__4)
                self.state = 105
                self.expr0()
                self.state = 106
                self.match(LOVEParser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RepetitionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr2(self):
            return self.getTypedRuleContext(LOVEParser.Expr2Context,0)


        def getRuleIndex(self):
            return LOVEParser.RULE_repetitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepetitions" ):
                listener.enterRepetitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepetitions" ):
                listener.exitRepetitions(self)




    def repetitions(self):

        localctx = LOVEParser.RepetitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_repetitions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 110
            self.expr2()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LOVEParser.RULE_array

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ArrContext(ArrayContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a LOVEParser.ArrayContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INT(self, i:int=None):
            if i is None:
                return self.getTokens(LOVEParser.INT)
            else:
                return self.getToken(LOVEParser.INT, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArr" ):
                listener.enterArr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArr" ):
                listener.exitArr(self)



    def array(self):

        localctx = LOVEParser.ArrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_array)
        self._la = 0 # Token type
        try:
            localctx = LOVEParser.ArrContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 112
            self.match(LOVEParser.T__6)
            self.state = 121
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 113
                self.match(LOVEParser.INT)
                self.state = 118
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==8:
                    self.state = 114
                    self.match(LOVEParser.T__7)
                    self.state = 115
                    self.match(LOVEParser.INT)
                    self.state = 120
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 123
            self.match(LOVEParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FblockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(LOVEParser.NEWLINE)
            else:
                return self.getToken(LOVEParser.NEWLINE, i)

        def stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LOVEParser.StatContext)
            else:
                return self.getTypedRuleContext(LOVEParser.StatContext,i)


        def getRuleIndex(self):
            return LOVEParser.RULE_fblock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFblock" ):
                listener.enterFblock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFblock" ):
                listener.exitFblock(self)




    def fblock(self):

        localctx = LOVEParser.FblockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_fblock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 270413824) != 0:
                self.state = 126
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 1978368) != 0:
                    self.state = 125
                    self.stat()


                self.state = 128
                self.match(LOVEParser.NEWLINE)
                self.state = 133
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FparamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(LOVEParser.ID, 0)

        def getRuleIndex(self):
            return LOVEParser.RULE_fparam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFparam" ):
                listener.enterFparam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFparam" ):
                listener.exitFparam(self)




    def fparam(self):

        localctx = LOVEParser.FparamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_fparam)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 134
            self.match(LOVEParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





